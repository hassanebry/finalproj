security:
    encoders:
        App\Entity\Utilisateur:
            algorithm: bcrypt
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }
        in_database:
            entity:
                class: App\Entity\Utilisateur
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            provider: in_database
            guard:
                authenticators:
                    - App\Security\AuthControllerAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_login
            access_denied_handler: App\Controller\AccessDeniedController

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/trajet/nouveau-trajet, roles: ROLE_USER }
        - { path: ^/edit, roles: ROLE_USER }
        - { path: ^/delete, roles: ROLE_USER }
        - { path: ^/mestrajets, roles: ROLE_USER }
        - { path: ^/new-reservation, roles: ROLE_USER }
        - { path: ^/mesreservations, roles: ROLE_USER }
        - { path: ^/mesreservations1, roles: ROLE_USER }
        - { path: ^/mesreservations1, roles: ROLE_USER }
        - { path: ^/commentaire, roles: ROLE_USER }

    
    role_hierarchy:
        ROLE_USER: ROLE_USER
        ROLE_ADMIN: ROLE_USER
